version "4.5"

class PsgHandler : EventHandler
{
	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'BattleArmour':
				if (random[psgrand]() <= 48)
				{
					e.Replacement = 'HDPersonalShieldGenerator';
				}
				break;
		}
	}

	override void WorldThingSpawned(WorldEvent e)
	{
		let bat = HDBattery(e.Thing);
		if (bat)
		{
			bat.ItemsThatUseThis.Push("HDPersonalShieldGenerator");
		}
	}
}

class HDPersonalShieldGenerator : HDWeapon
{
	enum PSProperty
	{
		PSProp_Flags,
		PSProp_UseOffset,
		PSProp_Battery1,
		PSProp_Battery2,
		PSProp_Battery3,
		PSProp_ShieldRegenerated,
		PSProp_Degradation,
		PSProp_Mode,
		PSProp_UpgradePoints
	}

	action void A_AddOffset(int ofs)
	{
		invoker.WeaponStatus[PSProp_UseOffset] += ofs;
	}

	override bool AddSpareWeapon(actor newowner) { return AddSpareWeaponRegular(newowner); }
	override HDWeapon GetSpareWeapon(actor newowner , bool reverse, bool doselect) { return GetSpareWeaponRegular(newowner, reverse, doselect); }
	override string, double GetPickupSprite()
	{
		string main = "PSG"..min(3, (WeaponStatus[PSProp_UpgradePoints] / 3));
		return main..(GetBatteriesLoaded(1) > 0 && Enabled ? "B" : "A").."0", 0.2;
	}
	override string GetHelpText()
	{
		string BaseString = WEPHELP_RELOAD.."  Reload battery\n"
		..WEPHELP_UNLOAD.."  Unload battery\n"
		..WEPHELP_FIRE.." or "..WEPHELP_ALTFIRE.."  Change slider position\n"
		..WEPHELP_ZOOM.."  Toggle on/off";
		return BaseString;
	}
	override double WeaponBulk()
	{
		return 20 * min(3, (WeaponStatus[PSProp_UpgradePoints] / 3)) + GetBatteriesLoaded() * ENC_BATTERY_LOADED;
	}
	override void LoadoutConfigure(string input)
	{
		InitializeWepStats(false);
		int points = GetLoadoutVar(input, "points", 1);
		if (points > 0)
		{
			WeaponStatus[PSProp_UpgradePoints] = points;
		}
	}
	override void InitializeWepStats(bool idfa)
	{
		WeaponStatus[PSProp_Battery1] = 20;
		WeaponStatus[PSProp_Battery2] = 20;
		WeaponStatus[PSProp_Battery3] = 20;
	}

	override int GetSbarNum(int flags)
	{
		let HDHud = HDStatusBar(StatusBar);
		let shield = HDPersonalShield(FindInventory('HDPersonalShield'));
		if (shield)
		{
			HDHud.SavedColour = shield.Amount > 0 ? (Enabled ? Font.CR_GREEN : Font.CR_YELLOW) : Font.CR_RED;
			return max(0, shield.Amount);
		}
		return Super.GetSbarNum(flags);
	}

	override void AttachToOwner(Actor other)
	{
		let shield = HDPersonalShield(other.GiveInventoryType('HDPersonalShield'));
		if (shield)
		{
			shield.Amount = 0;
			shield.Depleted = true;
		}
		Super.AttachToOwner(other);
	}

	override void DoEffect()
	{
		Super.DoEffect();

		int batteries = GetBatteriesLoaded(1);
		if (!Enabled)
		{
			return;
		}

		int base, extra;
		[base, extra] = GetEfficiency();
		int adj = GetAdjustedEfficiency(base + extra, WeaponStatus[PSProp_Degradation]);
		if (WeaponStatus[PSProp_ShieldRegenerated] >= adj)
		{
			WeaponStatus[PSProp_ShieldRegenerated] -= adj;
			if (adj > 0)
			{
				WeaponStatus[PSProp_Degradation] += WeaponStatus[PSProp_Mode] == 1 ? 2 : 1;
			}
			for (int i = PSProp_Battery1; i <= PSProp_Battery3; ++i)
			{
				if (WeaponStatus[i] > 0)
				{
					WeaponStatus[i]--;
				}
			}
		}
	}

	clearscope int GetBatteriesLoaded(int minCharge = 0)
	{
		int num = 0;
		for (int i = PSProp_Battery1; i <= PSProp_Battery3; ++i)
		{
			if (WeaponStatus[i] >= minCharge)
			{
				num++;
			}
		}
		return num;
	}

	int, int GetMaxShield() const
	{
		int base = WeaponStatus[PSProp_Mode] == 1 ? 3000 : 500;
		int extra = WeaponStatus[PSProp_Mode] == 1 ? 500 : 50;
		return base, extra * WeaponStatus[PSProp_UpgradePoints];
	}

	double GetThickness() const
	{
		return WeaponStatus[PSProp_Mode] == 1 ? 3.5 : 1.5;
	}

	private int, int GetEfficiency() const
	{
		return 800, 50 * WeaponStatus[PSProp_UpgradePoints];
	}

	private int GetAdjustedEfficiency(int base, int degradation) const
	{
		return max(0, base - 5 * degradation);
	}

	double, double GetRechargeRate() const
	{
		return WeaponStatus[PSProp_Mode] == 1 ? 1 : 3;
	}

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		vector2 bob = hpl.hudbob * 0.3;
		int Offset = WeaponStatus[PSProp_UseOffset];
		bob.y += Offset;
		
		sb.DrawImage(GetPickupSprite(), (0, 25) + bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_CENTER_BOTTOM, box: (20, -1), scale:(2, 2));
		for (int i = 0; i < 3; ++i)
		{
			// The batmobile won't start.
			// Check the battery.
			// What's a tery?
			// *slap*
			int tery = hdw.WeaponStatus[PSProp_Battery1 + i];
			if (tery > -1)
			{
				string icon; int fontCol;
				[icon, fontCol] = AceCore.GetBatteryColor(tery);
				sb.DrawImage(icon, (-14, -11 + 15 * i) + bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_RIGHT | sb.DI_ITEM_VCENTER, box: (-1, 15));
				sb.DrawString(sb.mAmountFont, sb.FormatNumber(hdw.WeaponStatus[PSProp_Battery1 + i], 1, 2), (-12, -8 + 15 * i) + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_RIGHT, fontCol);
			}
		}

		int batteries = GetBatteriesLoaded(1);

		int fontHeight = sb.pSmallFont.mFont.GetHeight() / 2;
		vector2 pos = (13, -18 - fontHeight);

		// Mode.
		string str = String.Format("MOD "..Modes[WeaponStatus[PSProp_Mode]]);
		sb.DrawString(sb.pSmallFont, str, pos + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_GOLD);
		pos.y += 10;

		// Capacity.
		int base, extra;
		[base, extra] = GetMaxShield();
		str = String.Format("CAP: \c[Teal]%i \c[DarkGray](+%i)\c-", base + extra, extra);
		sb.DrawString(sb.pSmallFont, str, pos + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
		pos.y += 10;

		// Thickness.
		str = String.Format("THK: %s", WeaponStatus[PSProp_Mode] == 1 ? "\c[Green]High\c-" : "\c[Red]Low\c-");
		sb.DrawString(sb.pSmallFont, str, pos + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
		pos.y += 10;

		// Efficiency.
		[base, extra] = GetEfficiency();
		int adj = GetAdjustedEfficiency(base + extra, WeaponStatus[PSProp_Degradation]);
		string efcol = "\c[Green]";
		if (adj < base * 0.20)
		{
			efcol = "\c[Black]";
		}
		else if (adj < base * 0.40)
		{
			efcol = "\c[Red]";
		}
		else if (adj < base * 0.60)
		{
			efcol = "\c[Orange]";
		}
		else if (adj < base * 0.80)
		{
			efcol = "\c[Yellow]";
		}

		int relative = adj - (base + extra);
		str = String.Format("EFF: \c[Teal]%i\c-/%s%i \c[DarkGray](%s%i)\c-", adj - WeaponStatus[PSProp_ShieldRegenerated], efcol, adj, (relative >= 0 ? "+" : ""), relative);
		sb.DrawString(sb.pSmallFont, str, pos + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
		pos.y += 10;

		// Recharge rate.
		str = String.Format("RCH: %s", WeaponStatus[PSProp_Mode] == 1 ? "\c[Green]High\c-" : "\c[Red]Low\c-");
		sb.DrawString(sb.pSmallFont, str, pos + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
		pos.y += 10;

		// Status.
		sb.DrawString(sb.pSmallFont, Enabled ? "\c[Green]Enabled\c-" : "\c[Red]Disabled\c-", pos + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT);
	}

	override void ActualPickup(Actor other, bool silent)
	{
		if (other.player && other.player.ReadyWeapon is 'HDPersonalShieldGenerator' && other.player.cmd.buttons & BT_FIREMODE)
		{
			if (WeaponStatus[PSProp_Degradation] > 120)
			{
				other.A_Log("Shield generator is too damaged to be used for parts.", true);
				return;	
			}
			let gen = HDPersonalShieldGenerator(other.FindInventory('HDPersonalShieldGenerator'));
			other.A_StartSound("PSG/Upgrade");
			other.A_Log("Shield generator was stripped for parts.", true);
			gen.WeaponStatus[PSProp_UpgradePoints] += WeaponStatus[PSProp_UpgradePoints] + 1;
			Destroy();
			return;
		}
		Super.ActualPickup(other, silent);
	}

	static const string Modes[] = { "([]------):\c[Green] Standard\c-", "(------[]):\c[Red] Overcharged\c-" };
	bool Enabled;

	Default
	{
		+HDWEAPON.FITSINBACKPACK
		+INVENTORY.INVBAR
		+WEAPON.WIMPY_WEAPON
		-HDWEAPON.DROPTRANSLATION
		Inventory.Icon "PSG0A0";
		Inventory.PickupSound "weapons/pocket";
		Inventory.PickupMessage "You picked up a personal shield generator.";
		Tag "Personal Shield Generator";
		HDWeapon.RefId "psg";
		Scale 0.35;
	}

	States
	{
		RegisterSprites:
			PSG0 A 0; PSG1 A 0; PSG2 A 0; PSG3 A 0;

		Spawn:
			PSG0 A 1
			{
				string str = invoker.GetPickupSprite();
				sprite = GetSpriteIndex(str.Left(4));
				frame = int(invoker.GetBatteriesLoaded(1) > 0);
			}
			Loop;
		Select:
			TNT1 A 0 A_AddOffset(100);
			Goto Super::Select;
		Ready:
			TNT1 A 1
			{
				if (PressingUser3())
				{
					A_MagManager("HDBattery");
					return;
				}

				if (JustPressed(BT_ATTACK) && invoker.WeaponStatus[PSProp_Mode] > 0)
				{
					A_StartSound("PSG/Adjust", 10);
					invoker.WeaponStatus[PSProp_Mode]--;
				}
				else if (JustPressed(BT_ALTATTACK) && invoker.WeaponStatus[PSProp_Mode] < 1)
				{
					A_StartSound("PSG/Adjust", 10);
					invoker.WeaponStatus[PSProp_Mode]++;
				}

				int off = invoker.WeaponStatus[PSProp_UseOffset];
				if (off > 0)
				{
					invoker.WeaponStatus[PSProp_UseOffset] = off * 2 / 3;
				}

				A_WeaponReady((WRF_ALL | WRF_NOFIRE) & ~WRF_ALLOWUSER2);
			}
			Goto ReadyEnd;
		Unload:
			TNT1 A 20;
			TNT1 A 5
			{
				int count = invoker.GetBatteriesLoaded();
				if (count == 0)
				{
					return;
				}
				int last = invoker.WeaponStatus[PSProp_Battery1 + count - 1];
				if (PressingUnload() || PressingReload())
				{
					HDBattery.GiveMag(self, "HDBattery", last);
					A_StartSound("weapons/pocket", 9);
					A_SetTics(20);
				}
				else
				{
					HDBattery.SpawnMag(self, "HDBattery", last);
				}
				invoker.WeaponStatus[PSProp_Battery1 + count - 1] = -1;
				invoker.Icon = TexMan.CheckForTexture(invoker.GetPickupSprite(), TexMan.Type_Any);
			}
			Goto ReloadEnd;
		Reload:
			TNT1 A 14 A_StartSound("weapons/pocket", 9);
			TNT1 A 5
			{
				let bat = HDBattery(FindInventory('HDBattery'));
				int count = invoker.GetBatteriesLoaded();
				if (!bat || count == 3)
				{
					return;
				}
				invoker.WeaponStatus[PSProp_Battery1 + count] = bat.TakeMag(true);
				A_StartSound("weapons/vulcopen1", 8, CHANF_OVERLAP);
				invoker.Icon = TexMan.CheckForTexture(invoker.GetPickupSprite(), TexMan.Type_Any);
			}
			Goto ReloadEnd;
		Zoom:
			TNT1 A 15
			{
				invoker.Enabled = !invoker.Enabled;
				A_StartSound("PSG/Toggle", 9, pitch: invoker.Enabled ? 1.0 : 0.8);
				invoker.Icon = TexMan.CheckForTexture(invoker.GetPickupSprite(), TexMan.Type_Any);
			}
			Goto Nope;
		ReloadEnd:
			TNT1 A 6;
			Goto Ready;
	}
}

class HDPersonalShield : HDMagicShield
{
	void ChangeMaxAmount(int newMax)
	{
		MaxAmount = newMax;
		if (Amount > newMax)
		{
			// [Ace] Where do you think that extra shield goes?
			owner.DamageMobj(self, self, (Amount - newMax) >> 5, 'Bashing', DMG_NO_ARMOR | DMG_FORCED);
			Amount = MaxAmount;

			owner.A_StartSound("misc/mobshieldx", CHAN_BODY, CHANF_OVERLAP, 0.75);
			for (int i = 0; i < 10; ++i)
			{
				vector3 rpos = owner.pos + (frandom(-owner.radius, owner.radius), frandom(-owner.radius, owner.radius), frandom(0, owner.height));
				Actor spk = Spawn("ShieldSpark", rpos, ALLOW_REPLACE);
				spk.vel = (frandom(-2, 2), frandom(-2, 2), frandom(-2, 2)) + owner.vel;
			}
		}
	}

	override void DoEffect()
	{
		if (owner.bCORPSE || owner.Health <= 0)
		{
			return;
		}

		if (!ShieldGenerator || !ShieldGenerator.owner)
		{
			ShieldGenerator = HDPersonalShieldGenerator(owner.FindInventory('HDPersonalShieldGenerator'));
			if (!ShieldGenerator)
			{
				ChangeMaxAmount(0);
				Destroy();
				return;
			}
		}

		int batteries = ShieldGenerator.GetBatteriesLoaded(1);
		if (batteries < 3)
		{
			ShieldGenerator.Enabled = false;
		}
		else
		{
			int base, extra;
			[base, extra] = ShieldGenerator.GetMaxShield();
			int newMax = base + extra;
			ChangeMaxAmount(newMax);
		}

		if (!ShieldGenerator.Enabled)
		{
			return;
		}
		
		if (UnDepleteTimer > 0)
		{
			UnDepleteTimer--;
		}
		else if (Amount >= 0 && Amount < MaxAmount)
		{
			double rate = ShieldGenerator.GetRechargeRate();
			// https://www.desmos.com/calculator/bnngtfuad4

			double div = 2;
			if (ShieldGenerator.WeaponStatus[ShieldGenerator.PSProp_Mode] == 1)
			{
				div = 1.43;
			} 
			double fac = 1.0 - (sin(Amount / (MaxAmount / 2.0) * 90.0) / div);

			double adj = rate * fac;
			RechargeFrac++;
			while (RechargeFrac >= adj && Amount < MaxAmount)
			{
				RechargeFrac -= adj;
				Amount = min(Amount + 1, MaxAmount);
				ShieldGenerator.WeaponStatus[ShieldGenerator.PSProp_ShieldRegenerated]++;
			}
		}
		else if (Amount < 0)
		{
			UnDepleteTimer = 105;
			Depleted = true;
			Amount = 0;
		}

		if (Depleted && Amount > 0)
		{
			Depleted = false;
			if (hd_debug)
			{
				Console.Printf(owner.GetClassName().." shield restored!");
			}
			owner.A_StartSound("misc/mobshieldf", CHAN_BODY, CHANF_OVERLAP, 0.75);
			for (int i = 0; i < 10; ++i)
			{
				vector3 rpos = owner.pos + (frandom(-owner.radius, owner.radius), frandom(-owner.radius, owner.radius), frandom(0, owner.height));
				actor spk = actor.Spawn("ShieldSpark", rpos, ALLOW_REPLACE);
				vector3 sv = spk.Vec3To(owner);
				sv.z += height / 2;
				spk.vel = sv * 0.02;
			}
		}
	}

	override double, double OnBulletImpact(HDBulletActor bullet, double pen, double penshell, double hitangle, double deemedwidth, vector3 hitpos, vector3 vu, bool hitactoristall)
	{
		bullet.speed /= ShieldGenerator.GetThickness();
		return Super.OnBulletImpact(bullet, pen, penshell, hitangle, deemedwidth, hitpos, vu, hitactoristall);
	}

	override void DrawHUDStuff(HDStatusBar sb, HDPlayerPawn hpl, int hdflags, int gzflags)
	{
		if (hdflags & HDSB_AUTOMAP || !ShieldGenerator || hpl.InvSel is 'HDPersonalShieldGenerator')
		{
			return;
		}
		
		sb.DrawImage(ShieldGenerator.GetPickupSprite(), (100, -3), gzflags | sb.DI_ITEM_LEFT_BOTTOM, box: (10, -1));
		sb.DrawString(sb.pNewSmallFont, sb.FormatNumber(max(0, Amount), 1, 6), (110, -10), gzflags | sb.DI_TEXT_ALIGN_LEFT, Amount > 0 ? (ShieldGenerator.Enabled ? Font.CR_GREEN : Font.CR_YELLOW) : Font.CR_RED, scale: (0.5, 0.5));
		for (int i = 0; i < 3; ++i)
		{
			int bat = ShieldGenerator.WeaponStatus[ShieldGenerator.PSProp_Battery1 + i];
			if (bat > -1)
			{
				sb.DrawImage(AceCore.GetBatteryColor(bat), (99, -23 + 8 * i), sb.DI_ITEM_RIGHT | sb.DI_ITEM_VCENTER | gzflags, box: (-1, 7));
			}
		}
	}

	const RechargeTics = 5;
	bool Depleted;
	private int UnDepleteTimer;
	private double RechargeFrac;
	private HDPersonalShieldGenerator ShieldGenerator;

	Default
	{
		Inventory.MaxAmount 500;
		+INVENTORY.KEEPDEPLETED
		-INVENTORY.INVBAR
		HDDamageHandler.Priority 10002; // [Ace] Handle it before the shield from Arcanum.
	}
}